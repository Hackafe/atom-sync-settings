const githubApi = require('../lib/github-api')

describe('githubApi', () => {
	// FIXME: not sure why linux api test is timing out
	if (process.env.GITHUB_TOKEN && process.platform !== 'linux') {
		describe('gist api', () => {
			let token, gistId
			beforeEach(async () => {
				token = process.env.GITHUB_TOKEN
				const gistSettings = {
					public: false,
					description: 'Test gist by Sync Settings for Atom https://github.com/atom-community/sync-settings',
					files: { README: { content: '# Generated by Sync Settings for Atom https://github.com/atom-community/sync-settings' } },
				}

				const res = await githubApi.gists.create(token, gistSettings)
				gistId = res.data.id
			})

			afterEach(async () => {
				await githubApi.gists.delete(token, { gist_id: gistId })
			})

			it('returns correct properties', async () => {
				const gist1 = await githubApi.gists.get(token, { gist_id: gistId })
				expect(Object.keys(gist1.data.files).length).toBe(1)
				await githubApi.gists.update(token, {
					gist_id: gistId,
					description: 'automatic update by http://atom.io/packages/sync-settings',
					files: {
						'init.coffee': {
							content: '# init',
							filename: 'init.coffee',
						},
					},
				})
				const gist2 = await githubApi.gists.get(token, { gist_id: gistId })
				expect(gist2).toEqual(jasmine.objectContaining({
					status: 200,
					url: jasmine.stringMatching(/^https:\/\/api\.github\.com\/gists/),
					headers: jasmine.any(Object),
					data: jasmine.objectContaining({
						id: jasmine.stringMatching(/^\w+$/),
						public: false,
						description: 'automatic update by http://atom.io/packages/sync-settings',
						html_url: jasmine.stringMatching(/^https:\/\/gist\.github\.com/),
						history: [
							jasmine.objectContaining({
								version: jasmine.stringMatching(/^\w+$/),
							}),
							jasmine.objectContaining({
								version: jasmine.stringMatching(/^\w+$/),
							}),
						],
						files: {
							README: jasmine.objectContaining({
								content: '# Generated by Sync Settings for Atom https://github.com/atom-community/sync-settings',
								filename: 'README',
							}),
							'init.coffee': jasmine.objectContaining({
								content: '# init',
								filename: 'init.coffee',
							}),
						},
					}),
				}))
			}, 10 * 1000)
		})
	}

	describe('errorMessage', () => {
		it('returns json .message', () => {
			const error = new Error(JSON.stringify({ message: 'message' }))
			const message = githubApi.errorMessage(error)
			expect(message).toBe('message')
		})

		it('returns error.message', () => {
			const error = new Error('message')
			const message = githubApi.errorMessage(error)
			expect(message).toBe('message')
		})
	})
})
